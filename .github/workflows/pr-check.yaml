#
# Copyright (C) 2022-2024 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

name: pr-check

on: [pull_request]

jobs:
  windows:
    name: Windows
    runs-on: windows-2022
    timeout-minutes: 60
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> ${env:GITHUB_OUTPUT}

      - uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: yarn
        run: |
          yarn --frozen-lockfile --network-timeout 180000

      - name: Run Build
        timeout-minutes: 20
        run: yarn build

  darwin:
    name: macOS
    runs-on: macos-14
    timeout-minutes: 40
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> ${GITHUB_OUTPUT}

      - uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Execute yarn
        if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
        run: yarn --frozen-lockfile --network-timeout 180000

      - name: Run Build
        timeout-minutes: 20
        run: yarn build

  lint-format-unit:
    name: linter, formatters and unit tests
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> ${GITHUB_OUTPUT}

      - uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Execute yarn
        run: yarn --frozen-lockfile

      - name: Run linter
        run: yarn lint:check

      - name: Run formatter
        run: yarn format:check

      - name: Run Tests
        run: yarn test

  e2e-tests:
    name: e2e tests for ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2022, ubuntu-24.04] #, macos-14
    runs-on: ${{ matrix.os }}
    env:
      SKIP_INSTALLATION: true
    steps:
      # Checkout crc extension
      - uses: actions/checkout@v4
        with:
          path: crc-extension

      # Checkout podman desktop
      - uses: actions/checkout@v4
        with:
          repository: containers/podman-desktop
          ref: main
          path: podman-desktop

      # Checkout sso extension
      - uses: actions/checkout@v4
        if: matrix.os == 'windows-2022'
        with:
          repository: redhat-developer/podman-desktop-redhat-account-ext
          ref: main
          path: sso-extension

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false
          package_json_file: ./podman-desktop/package.json

      - name: Install Podman Desktop dependencies
        working-directory: ./podman-desktop
        run: pnpm install

      - name: Install SSO extension dependencies
        if: matrix.os == 'windows-2022'
        working-directory: ./sso-extension
        run: pnpm install

      - name: Build Podman Desktop for E2E tests
        working-directory: ./podman-desktop
        run: pnpm test:e2e:build
      
      - name: Ensure getting current HEAD version of the test framework (ubuntu)
        if: matrix.os == 'ubuntu-24.04'
        working-directory: ./crc-extension
        run: |
          # workaround for https://github.com/containers/podman-desktop-extension-bootc/issues/712
          version=$(npm view @podman-desktop/tests-playwright@next version)
          echo "Version of @podman-desktop/tests-playwright to be used: $version"
          jq --arg version "$version" '.devDependencies."@podman-desktop/tests-playwright" = $version' package.json > package.json_tmp && mv package.json_tmp package.json
        shell: bash

      - name: Install CRC extension dependencies 
        working-directory: ./crc-extension
        run: yarn install --check-files

      - name: Execute yarn in OpenShift Local Extension
        working-directory: ./crc-extension
        run: yarn --frozen-lockfile

      - name: Revert unprivileged user namespace restrictions in Ubuntu 24.04
        if: matrix.os == 'ubuntu-24.04'
        run: |
          # allow unprivileged user namespace
          sudo sysctl -w kernel.apparmor_restrict_unprivileged_userns=0

      - name: Build OpenShift Local extension from container file and SSO dependency (Ubuntu, podman)
        if: matrix.os == 'ubuntu-24.04'
        working-directory: ./crc-extension
        run: |
          # build crc extension
          podman build -t openshift_local_image . -f ./oci/Containerfile.multistage
          CONTAINER_ID_CRC=$(podman create localhost/openshift_local_image --entrypoint "")
          podman export $CONTAINER_ID_CRC > /tmp/openshift_local_extension.tar
          
          # build sso extension
          podman pull ghcr.io/redhat-developer/podman-desktop-redhat-account-ext:latest
          CONTAINER_ID_SSO=$(podman create ghcr.io/redhat-developer/podman-desktop-redhat-account-ext --entrypoint "")
          podman export $CONTAINER_ID_SSO > /tmp/sso_extension.tar

          # move extension files to expected locations
          mkdir -p tests/playwright/output/crc-tests-pd/plugins
          tar -xf /tmp/openshift_local_extension.tar -C tests/playwright/output/crc-tests-pd/plugins/
          mv tests/playwright/output/crc-tests-pd/plugins/extension/ tests/playwright/output/crc-tests-pd/plugins/crcextension
          tar -xf /tmp/sso_extension.tar -C tests/playwright/output/crc-tests-pd/plugins/
          mv tests/playwright/output/crc-tests-pd/plugins/extension/ tests/playwright/output/crc-tests-pd/plugins/ssoextension
          
      - name: Build OpenShift Local extension locally (Windows, docker) #from container file is not available yet
        if: matrix.os == 'windows-2022'
        working-directory: ./crc-extension
        shell: pwsh
        run: |
          # -- following https://github.com/crc-org/crc-extension/blob/main/oci/Containerfile.multistage --
          # build extension
          yarn build
          # make expected test folders
          mkdir tests\playwright\output\crc-tests-pd\plugins
          mkdir tests\playwright\output\crc-tests-pd\plugins\crcextension
          mkdir tests\playwright\output\crc-tests-pd\plugins\ssoextension
          # move necessary files there
          'package.json', 'LICENSE', 'icon.png', 'README.md', 'dist' | % { cp $_ ./tests/playwright/output/crc-tests-pd/plugins/crcextension -Recurse -Force}

      - name: Build SSO extension (crc dependency) locally (Windows, docker) #from container file is not available yet
        if: matrix.os == 'windows-2022'
        working-directory: ./sso-extension
        shell: pwsh
        run: |
          # -- following https://github.com/redhat-developer/podman-desktop-redhat-account-ext/blob/main/Containerfile --
          # build extension
          pnpm build
          # put the contents into its expected folder:
          cp .\builtin\redhat-authentication.cdix\* ..\crc-extension\tests\playwright\output\crc-tests-pd\plugins\ssoextension -Recurse -Force

      - name: Run All E2E tests
        working-directory: ./crc-extension
        env:
          PODMAN_DESKTOP_ARGS: ${{ github.workspace }}/podman-desktop
        run: yarn test:e2e
        
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v5
        if: always() # always run even if the previous step fails
        with:
          fail_on_failure: true
          include_passed: true
          detailed_summary: true
          annotate_only: true
          require_tests:  true
          report_paths: '**/*results.xml'

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-tests-${{ matrix.os }}
          path: ./**/tests/**/output/
